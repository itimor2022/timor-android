plugins {
    id 'com.android.application'
    id 'kotlin-parcelize'
    id 'kotlin-android'
}

android {

    signingConfigs {
        debug {
            // storeFile file('../test.jks')
            // storePassword '123123'
            // keyAlias = 'test'
            // keyPassword '123123'
        }
        release {
             storeFile file('../11.jks')
             storePassword '111111'
             keyAlias = 'key0'
             keyPassword '111111'
        }
    }
    namespace 'com.jjyy.zy101'
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.jjyy.zy101"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        ndk {
            //根据需要 自行选择添加的对应cpu类型的.so库。
            abiFilters "armeabi-v7a", "arm64-v8a"

//            abiFilters  "arm64-v8a", "armeabi-v7a", "x86", "x86_64"
//            abiFilters "arm64-v8a", "armeabi-v7a", "x86"
//            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86'
        }
        compileSdkPreview = "UpsideDownCake"
    }

    buildTypes {
        release {
            jniDebuggable true
            //  zipAlignEnabled true   //Zipalign优化
            minifyEnabled true  // 是否混淆
            shrinkResources true  // 是否去除无效的资源文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
//            jniDebuggable true
//            zipAlignEnabled true   //Zipalign优化
//            minifyEnabled true  // 是否混淆
//            shrinkResources true  // 是否去除无效的资源文件
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    // 打包 用来打包修改名字的 跟defaultConfig是同一级的
    applicationVariants.all { variant ->
        variant.outputs.all { output -> // 这里和2.0的不一样 2.0是each 3.0是all
            def outputFile = output.outputFile
            def fileName;
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                if (variant.buildType.name.equals('release')) {
                    fileName = "mysafe_${releaseTime()}_${defaultConfig.versionName}_release.apk"
                } else if (variant.buildType.name.equals('debug')) {
                    fileName = "mysafe_${releaseTime()}_${defaultConfig.versionName}_debug.apk"
                }
                outputFileName = fileName // 这里和2.0不一样
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        viewBinding true
        //noinspection DataBindingWithoutKapt
        dataBinding true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

static def releaseTime() {
    return new Date().format("yyyyMMddHHmmss")
}

dependencies {
    api project(':wkbase')
    implementation project(path: ':wkuikit')
    implementation project(path: ':wklogin')
    implementation project(path: ':wkscan')
    implementation project(path: ':wkpush')
    implementation project(path: ':wkrtc')
    implementation 'com.facebook.fresco:fresco:2.6.0'
    implementation project(path: ':MyLibs:wkimageeditor')
    implementation project(path: ':MyLibs:wkgroupmanger')
    implementation project(path: ':MyLibs:wkadvanced')
    implementation project(path: ':MyLibs:wkfile')
}